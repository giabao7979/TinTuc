@model NewsManagement.Models.Category
@{
    ViewBag.Title = "Sửa danh mục";
}

<!-- TỐI ƯU CSS - CHỈ LOAD NHỮNG GÌ CẦN THIẾT -->
<link href="~/Content/css/site.css" rel="stylesheet" />
<link href="~/Content/css/category.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.2/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-warning text-white">
                    <h3><i class="fas fa-edit mr-2"></i>Chỉnh sửa danh mục</h3>
                    <small class="d-block mt-1">Cập nhật thông tin danh mục</small>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Edit", "Category", FormMethod.Post, new { @class = "form-horizontal", id = "editForm" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.Id)
                        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                        <!-- Thông tin hiện tại -->
                        <div class="alert alert-info">
                            <strong><i class="fas fa-info-circle mr-1"></i>Thông tin hiện tại:</strong>
                            ID: #@Model.Id |
                            Thứ tự: @Model.Ordering |
                            Trạng thái: @(Model.Status ? "Hoạt động" : "Tạm dừng")
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, "Tên danh mục", htmlAttributes: new { @class = "control-label font-weight-bold" })
                            @Html.EditorFor(model => model.Name, new
                            {
                                htmlAttributes = new
                                {
                                    @class = "form-control",
                                    required = "required",
                                    maxlength = "255",
                                    placeholder = "Nhập tên danh mục..."
                                }
                            })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, "Mô tả", htmlAttributes: new { @class = "control-label font-weight-bold" })
                            @Html.TextAreaFor(model => model.Description, new
                            {
                                @class = "form-control",
                                rows = 3,
                                maxlength = "1000",
                                placeholder = "Mô tả ngắn gọn về danh mục..."
                            })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>

                        <!-- DROPDOWN TỐI ƯU - SỬ DỤNG SELECT2 CHO HIỆU SUẤT TỐT -->
                        <div class="form-group">
                            @Html.LabelFor(model => model.ParentId, "Danh mục cha", htmlAttributes: new { @class = "control-label font-weight-bold" })
                            <div class="position-relative">
                                @Html.DropDownList("ParentId", ViewBag.ParentId as SelectList, "-- Chọn danh mục cha (để trống = danh mục gốc) --", new
                                {
                                    @class = "form-control custom-select",
                                    id = "parentSelect"
                                })
                                <small class="form-text text-muted">
                                    <i class="fas fa-info-circle mr-1"></i>
                                    Để trống để tạo danh mục gốc. Không thể chọn chính nó hoặc danh mục con.
                                </small>
                            </div>
                            @Html.ValidationMessageFor(model => model.ParentId, "", new { @class = "text-danger" })
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Ordering, "Thứ tự", htmlAttributes: new { @class = "control-label font-weight-bold" })
                                    @Html.EditorFor(model => model.Ordering, new
                                    {
                                        htmlAttributes = new
                                        {
                                            @class = "form-control",
                                            type = "number",
                                            min = "0",
                                            max = "9999"
                                        }
                                    })
                                    @Html.ValidationMessageFor(model => model.Ordering, "", new { @class = "text-danger" })
                                    <small class="form-text text-muted">Số nhỏ hơn sẽ hiển thị trước</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label font-weight-bold">Trạng thái</label>
                                    <div class="custom-control custom-switch mt-2">
                                        @Html.CheckBoxFor(model => model.Status, new { @class = "custom-control-input", id = "statusSwitch" })
                                        <label class="custom-control-label" for="statusSwitch">
                                            <span id="statusText">@(Model.Status ? "Hoạt động" : "Tạm dừng")</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Buttons với loading state -->
                        <div class="form-group mt-4">
                            <div class="btn-group w-100" role="group">
                                <button type="submit" class="btn btn-warning btn-lg" id="submitBtn">
                                    <i class="fas fa-save mr-2"></i>Cập nhật danh mục
                                </button>
                                <a href="@Url.Action("Index")" class="btn btn-secondary btn-lg">
                                    <i class="fas fa-arrow-left mr-2"></i>Quay lại
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- TỐI ƯU JAVASCRIPT - CHỈ NHỮNG TÍNH NĂNG CẦN THIẾT -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<script>
$(document).ready(function() {
    // 1. FORM VALIDATION TỐI ƯU
    $('#editForm').on('submit', function(e) {
        var isValid = true;
        var errors = [];

        // Validate name
        var name = $('#Name').val().trim();
        if (!name) {
            errors.push('Tên danh mục không được để trống');
            isValid = false;
        } else if (name.length > 255) {
            errors.push('Tên danh mục không được quá 255 ký tự');
            isValid = false;
        }

        // Validate description length
        var description = $('#Description').val().trim();
        if (description.length > 1000) {
            errors.push('Mô tả không được quá 1000 ký tự');
            isValid = false;
        }

        // Validate ordering
        var ordering = parseInt($('#Ordering').val());
        if (isNaN(ordering) || ordering < 0 || ordering > 9999) {
            errors.push('Thứ tự phải là số từ 0 đến 9999');
            isValid = false;
        }

        if (!isValid) {
            e.preventDefault();
            alert('Vui lòng kiểm tra lại:\n' + errors.join('\n'));
            return false;
        }

        // Show loading state
        $('#submitBtn')
            .prop('disabled', true)
            .html('<i class="fas fa-spinner fa-spin mr-2"></i>Đang cập nhật...');

        return true;
    });

    // 2. DYNAMIC STATUS TEXT UPDATE
    $('#statusSwitch').change(function() {
        var isChecked = $(this).is(':checked');
        $('#statusText').text(isChecked ? 'Hoạt động' : 'Tạm dừng');
    });

    // 3. PARENT SELECT ENHANCEMENT - TỐI ƯU CHO DROPDOWN LỚN
    var $parentSelect = $('#parentSelect');

    // Thêm search functionality cho dropdown nếu có nhiều options
    if ($parentSelect.find('option').length > 10) {
        // Tạo search box đơn giản
        var searchHtml = '<input type="text" id="parentSearch" class="form-control form-control-sm mb-2" placeholder="Tìm kiếm danh mục cha..." autocomplete="off">';
        $parentSelect.before(searchHtml);

        $('#parentSearch').on('input', function() {
            var searchTerm = $(this).val().toLowerCase();
            $parentSelect.find('option').each(function() {
                var optionText = $(this).text().toLowerCase();
                var shouldShow = optionText.includes(searchTerm) || $(this).val() === '';
                $(this).toggle(shouldShow);
            });
        });
    }

    // 4. AUTO-SAVE DRAFT (OPTIONAL)
    var formData = {};
    function saveFormDraft() {
        formData = {
            name: $('#Name').val(),
            description: $('#Description').val(),
            parentId: $('#parentSelect').val(),
            ordering: $('#Ordering').val(),
            status: $('#statusSwitch').is(':checked')
        };
        localStorage.setItem('categoryEditDraft_' + @Model.Id, JSON.stringify(formData));
    }

    function loadFormDraft() {
        var draft = localStorage.getItem('categoryEditDraft_' + @Model.Id);
        if (draft) {
            try {
                var data = JSON.parse(draft);
                if (confirm('Bạn có muốn khôi phục dữ liệu đã soạn dở không?')) {
                    $('#Name').val(data.name || '');
                    $('#Description').val(data.description || '');
                    $('#parentSelect').val(data.parentId || '');
                    $('#Ordering').val(data.ordering || '');
                    $('#statusSwitch').prop('checked', data.status || false).trigger('change');
                }
                localStorage.removeItem('categoryEditDraft_' + @Model.Id);
            } catch(e) {
                console.log('Could not restore draft');
            }
        }
    }

    // Load draft on page load
    loadFormDraft();

    // Save draft every 30 seconds
    setInterval(saveFormDraft, 30000);

    // Save draft before page unload
    $(window).on('beforeunload', function() {
        saveFormDraft();
    });

    // 5. KEYBOARD SHORTCUTS
    $(document).keydown(function(e) {
        // Ctrl+S = Save
        if (e.ctrlKey && e.keyCode === 83) {
            e.preventDefault();
            $('#editForm').submit();
        }

        // Escape = Cancel
        if (e.keyCode === 27) {
            if (confirm('Bạn có chắc muốn thoát mà không lưu?')) {
                window.location.href = '@Url.Action("Index")';
            }
        }
    });

    // 6. ENHANCED UX
    // Focus vào tên khi load trang
    $('#Name').focus().select();

    // Hiệu ứng hover cho buttons
    $('.btn').hover(
        function() { $(this).addClass('shadow'); },
        function() { $(this).removeClass('shadow'); }
    );
});

// 7. UTILITY FUNCTIONS
function resetForm() {
    if (confirm('Bạn có chắc muốn reset form về trạng thái ban đầu?')) {
        location.reload();
    }
}

function validateField(fieldName) {
    var field = $('#' + fieldName);
    var value = field.val().trim();

    field.removeClass('is-invalid is-valid');

    if (fieldName === 'Name' && (!value || value.length > 255)) {
        field.addClass('is-invalid');
        return false;
    } else if (fieldName === 'Description' && value.length > 1000) {
        field.addClass('is-invalid');
        return false;
    } else if (fieldName === 'Ordering') {
        var num = parseInt(value);
        if (isNaN(num) || num < 0 || num > 9999) {
            field.addClass('is-invalid');
            return false;
        }
    }

    field.addClass('is-valid');
    return true;
}

// Real-time validation
$('#Name, #Description, #Ordering').on('blur', function() {
    validateField(this.id);
});
</script>

