@model NewsManagement.Models.News
@{
    ViewBag.Title = "Thêm tin tức";
}

<link href="~/Content/css/site.css" rel="stylesheet" />
<link href="~/Content/css/home-page.css" rel="stylesheet" />
<link href="~/Content/css/creat.css" rel="stylesheet" />
<link href="~/Content/css/new.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.2/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
<div class="news-form-container">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="form-card">
                    <div class="form-header">
                        <h1><i class="fas fa-plus-circle mr-3"></i>Tạo tin tức mới</h1>
                        <p>Tạo và chia sẻ thông tin với cộng đồng</p>
                    </div>

                    <div class="form-body">
                        @using (Html.BeginForm("Create", "News", FormMethod.Post, new { @class = "news-form", id = "newsForm" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                            <div class="form-group">
                                <label for="Title">
                                    <i class="fas fa-heading mr-2"></i>Tiêu đề tin tức
                                </label>
                                @Html.EditorFor(model => model.Title, new
                                {
                                    htmlAttributes = new
                                    {
                                        @class = "form-control",
                                        required = "required",
                                        maxlength = "255",
                                        placeholder = "Nhập tiêu đề hấp dẫn cho tin tức của bạn..."
                                    }
                                })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                <small class="text-muted">
                                    <i class="fas fa-info-circle mr-1"></i>
                                    Tiêu đề nên ngắn gọn, súc tích và thu hút người đọc
                                </small>
                            </div>

                            <div class="form-group">
                                <label for="Summary">
                                    <i class="fas fa-align-left mr-2"></i>Tóm tắt nội dung
                                </label>
                                @Html.TextAreaFor(model => model.Summary, new
                                {
                                    @class = "form-control",
                                    rows = 4,
                                    maxlength = "500",
                                    placeholder = "Viết tóm tắt ngắn gọn về nội dung tin tức..."
                                })
                                @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
                                <small class="text-muted">
                                    <i class="fas fa-info-circle mr-1"></i>
                                    Tóm tắt giúp người đọc hiểu nhanh nội dung chính (tối đa 500 ký tự)
                                </small>
                            </div>

                            <div class="form-group">
                                <label for="Content">
                                    <i class="fas fa-edit mr-2"></i>Nội dung chi tiết
                                </label>
                                @Html.TextAreaFor(model => model.Content, new
                                {
                                    @class = "form-control",
                                    id = "content-editor",
                                    placeholder = "Viết nội dung đầy đủ của tin tức tại đây..."
                                })
                                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                                <small class="text-muted">
                                    <i class="fas fa-info-circle mr-1"></i>
                                    Nội dung chi tiết, đầy đủ thông tin để người đọc hiểu rõ vấn đề
                                </small>
                            </div>

                            <!-- Enhanced Category Selector -->
                            <div class="form-group">
                                <label>
                                    <i class="fas fa-tags mr-2"></i>Chọn danh mục
                                </label>

                                <div class="category-selector-section">
                                    <!-- Selected Categories Display -->
                                    <div class="selected-categories-display">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <strong><i class="fas fa-bookmark mr-2"></i>Danh mục đã chọn:</strong>
                                            <button type="button" id="clearAllCategories" class="btn btn-sm btn-outline-danger" style="display: none;">
                                                <i class="fas fa-times mr-1"></i>Xóa tất cả
                                            </button>
                                        </div>
                                        <div id="selectedCategoriesList">
                                            <span class="text-muted">
                                                <i class="fas fa-info-circle mr-1"></i>
                                                Chưa có danh mục nào được chọn
                                            </span>
                                        </div>
                                    </div>

                                    <!-- Category Tree Controls -->
                                    <div class="category-tree-controls mb-3">
                                        <div class="row">
                                            <div class="col-md-8">
                                                <div class="input-group">
                                                    <div class="input-group-prepend">
                                                        <span class="input-group-text">
                                                            <i class="fas fa-search"></i>
                                                        </span>
                                                    </div>
                                                    <input type="text" id="categorySearchInput" class="form-control"
                                                           placeholder="Tìm kiếm danh mục..." autocomplete="off">
                                                    <div class="input-group-append">
                                                        <button type="button" id="clearCategorySearch" class="btn btn-outline-secondary">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="btn-group w-100" role="group">
                                                    <button type="button" id="expandAllBtn" class="btn btn-outline-primary btn-sm" title="Mở rộng tất cả">
                                                        <i class="fas fa-expand-alt"></i>
                                                    </button>
                                                    <button type="button" id="collapseAllBtn" class="btn btn-outline-secondary btn-sm" title="Thu gọn tất cả">
                                                        <i class="fas fa-compress-alt"></i>
                                                    </button>
                                                    <button type="button" id="refreshCategoriesBtn" class="btn btn-outline-success btn-sm" title="Tải lại">
                                                        <i class="fas fa-sync-alt"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Category Tree Container -->
                                    <div class="category-tree-wrapper">
                                        <div class="card">
                                            <div class="card-header py-2 bg-light">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <h6 class="mb-0">
                                                        <i class="fas fa-folder-tree mr-2"></i>Chọn danh mục
                                                    </h6>
                                                    <span class="badge badge-info" id="categoryCount">Đang tải...</span>
                                                </div>
                                            </div>
                                            <div class="card-body p-0" style="max-height: 400px; overflow-y: auto;">
                                                <div id="categoryTreeContainer" class="category-tree-content">
                                                    <div class="loading-spinner text-center py-4">
                                                        <div class="spinner-border text-primary" role="status">
                                                            <span class="sr-only">Loading...</span>
                                                        </div>
                                                        <p class="mt-2 mb-0">Đang tải danh mục...</p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Search Results (khi search) -->
                                    <div id="categorySearchResults" class="search-results-container mt-3" style="display: none;">
                                        <div class="card">
                                            <div class="card-header py-2">
                                                <h6 class="mb-0">
                                                    <i class="fas fa-search mr-2"></i>Kết quả tìm kiếm
                                                </h6>
                                            </div>
                                            <div class="card-body p-0" style="max-height: 300px; overflow-y: auto;">
                                                <div id="searchResultsList"></div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Hidden inputs for selected categories -->
                                    <div id="hiddenCategoryInputs"></div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="Ordering">
                                            <i class="fas fa-sort-numeric-down mr-2"></i>Thứ tự hiển thị
                                        </label>
                                        @Html.EditorFor(model => model.Ordering, new
                                        {
                                            htmlAttributes = new
                                            {
                                                @class = "form-control",
                                                type = "number",
                                                @value = "1",
                                                min = "0",
                                                placeholder = "1"
                                            }
                                        })
                                        @Html.ValidationMessageFor(model => model.Ordering, "", new { @class = "text-danger" })
                                        <small class="text-muted">
                                            <i class="fas fa-info-circle mr-1"></i>
                                            Số nhỏ hơn sẽ hiển thị trước
                                        </small>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label>
                                            <i class="fas fa-toggle-on mr-2"></i>Trạng thái
                                        </label>
                                        <div class="status-toggle">
                                            <div>
                                                <strong>Kích hoạt tin tức</strong>
                                                <br><small class="text-muted">Tin tức sẽ hiển thị công khai</small>
                                            </div>
                                            <div class="status-switch">
                                                @Html.CheckBoxFor(model => model.Status, new { @checked = "checked", style = "display: none;" })
                                                <span class="status-slider"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary-custom" id="submitBtn">
                                    <i class="fas fa-save mr-2"></i>Xuất bản tin tức
                                </button>
                                <a href="@Url.Action("Index")" class="btn btn-secondary-custom">
                                    <i class="fas fa-times mr-2"></i>Hủy bỏ
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay">
    <div class="loading-content">
        <div class="spinner"></div>
        <p>Đang lưu tin tức...</p>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<script>
// Global variables
var selectedCategories = [];
var categoriesData = [];
var expandedCategoryIds = [];
var searchTimeout;

$(document).ready(function() {
    initializeForm();
    initializeCategoryTree();

    // Form validation
    $('#newsForm').submit(function(e) {
        if (!validateForm()) {
            e.preventDefault();
            return false;
        }
        showLoadingOverlay();
    });
});

function initializeForm() {
    // Clear all categories
    $('#clearAllCategories').click(function() {
        selectedCategories = [];
        updateSelectedCategoriesDisplay();
        updateHiddenInputs();
        updateCategoryTreeSelection();
    });

    // Status toggle
    $('.status-switch input').change(function() {
        // Handle status change if needed
    });
}

function initializeCategoryTree() {
    // Search functionality
    $('#categorySearchInput').on('input', function() {
        clearTimeout(searchTimeout);
        var term = $(this).val().trim();

        if (term.length < 2) {
            hideSearchResults();
            showCategoryTree();
            return;
        }

        searchTimeout = setTimeout(function() {
            searchCategories(term);
        }, 300);
    });

    // Clear search
    $('#clearCategorySearch').click(function() {
        $('#categorySearchInput').val('');
        hideSearchResults();
        showCategoryTree();
    });

    // Tree controls
    $('#expandAllBtn').click(function() {
        expandAllCategories();
    });

    $('#collapseAllBtn').click(function() {
        collapseAllCategories();
    });

    $('#refreshCategoriesBtn').click(function() {
        loadRootCategories();
    });

    // Load initial data
    loadRootCategories();
}

function loadRootCategories() {
    console.log('🌳 Loading root categories...');

    $('#categoryTreeContainer').html(`
        <div class="loading-spinner text-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-2 mb-0">Đang tải danh mục...</p>
        </div>
    `);

    $.ajax({
        url: '@Url.Action("GetCategoriesTree", "Home")',
        type: 'GET',
        dataType: 'json',
        timeout: 15000,
        success: function(data) {
            console.log('📦 Root categories loaded:', data);

            if (data.success && data.categories) {
                categoriesData = data.categories;
                renderCategoryTree(data.categories);
                $('#categoryCount').text(data.categories.length + ' danh mục');
            } else {
                showCategoryError('Không thể tải danh mục');
            }
        },
        error: function(xhr, status, error) {
            console.error('❌ Failed to load categories:', error);
            showCategoryError('Lỗi kết nối đến server');
        }
    });
}

function renderCategoryTree(categories) {
    if (!categories || categories.length === 0) {
        $('#categoryTreeContainer').html(`
            <div class="text-center py-4">
                <i class="fas fa-folder-open fa-3x text-muted mb-3"></i>
                <p class="text-muted">Chưa có danh mục nào</p>
            </div>
        `);
        return;
    }

    var html = '<div class="categories-menu p-2">';

    for (var i = 0; i < categories.length; i++) {
        var category = categories[i];
        html += renderCategoryItem(category, 0);
    }

    html += '</div>';
    $('#categoryTreeContainer').html(html);

    // Attach event listeners
    attachCategoryEventListeners();

    console.log('✅ Category tree rendered');
}

function renderCategoryItem(category, level) {
    var linkClass = getCategoryLinkClass(level);
    var iconClass = getCategoryIconClass(level);
    var isSelected = selectedCategories.some(function(sc) { return sc.Id === category.Id; });
    var isExpanded = expandedCategoryIds.includes(category.Id);

    var html = `
        <div class="category-item" data-category-level="${level}" data-category-id="${category.Id}">
            <div class="${linkClass} ${isSelected ? 'selected' : ''}"
                 data-category-id="${category.Id}"
                 data-category-name="${escapeHtml(category.Name)}"
                 data-level="${level}">
                <div class="category-content">
                    <div class="d-flex align-items-center flex-grow-1">
                        <!-- Selection Checkbox -->
                        <div class="category-checkbox mr-2">
                            <input type="checkbox"
                                   class="category-check"
                                   data-category-id="${category.Id}"
                                   data-category-name="${escapeHtml(category.Name)}"
                                   ${isSelected ? 'checked' : ''}>
                        </div>
                        <div class="category-icon mr-2">
                            <i class="${iconClass}"></i>
                        </div>
                        <div class="category-name">
                            ${escapeHtml(category.Name)}
                        </div>
                    </div>
                    <div class="category-meta">
                        <span class="news-count">${category.NewsCount || 0}</span>
                        ${category.HasChildren ? `
                            <button type="button" class="category-toggle-btn ml-2 ${isExpanded ? 'expanded' : ''}"
                                    data-parent-id="${category.Id}"
                                    data-level="${level}"
                                    title="${isExpanded ? 'Thu gọn' : 'Mở rộng'} danh mục con">
                                <i class="fas fa-chevron-${isExpanded ? 'down' : 'right'}"></i>
                            </button>
                        ` : ''}
                    </div>
                </div>
            </div>`;

    // Subcategories container
    if (category.HasChildren) {
        html += `<div id="subcategories-${category.Id}" class="subcategories-container ${isExpanded ? 'expanded' : ''}"
                      style="display: ${isExpanded ? 'block' : 'none'};">`;

        if (isExpanded) {
            // Will be loaded by AJAX
            html += `<div class="loading-subcategories text-center py-2">
                        <div class="spinner-border spinner-border-sm text-primary mr-2"></div>
                        <small class="text-muted">Đang tải...</small>
                     </div>`;
        }

        html += `</div>`;
    }

    html += `</div>`;
    return html;
}

function attachCategoryEventListeners() {
    // Checkbox selection
    $(document).off('change', '.category-check');
    $(document).on('change', '.category-check', function() {
        var categoryId = parseInt($(this).attr('data-category-id'));
        var categoryName = $(this).attr('data-category-name');

        if ($(this).is(':checked')) {
            selectCategory(categoryId, categoryName);
        } else {
            unselectCategory(categoryId);
        }
    });

    // Toggle subcategories
    $(document).off('click', '.category-toggle-btn');
    $(document).on('click', '.category-toggle-btn', function(e) {
        e.preventDefault();
        e.stopPropagation();

        var parentId = parseInt($(this).attr('data-parent-id'));
        var level = parseInt($(this).attr('data-level')) || 0;

        toggleSubcategories(parentId, level + 1);
    });

    // Load expanded subcategories
    loadExpandedSubcategories();
}

function toggleSubcategories(parentId, level) {
    var container = $('#subcategories-' + parentId);
    var toggleBtn = $(`[data-parent-id="${parentId}"]`);
    var icon = toggleBtn.find('i');

    if (container.hasClass('expanded')) {
        // Collapse
        container.removeClass('expanded').slideUp(300);
        icon.removeClass('fa-chevron-down').addClass('fa-chevron-right');
        toggleBtn.removeClass('expanded');

        // Remove from expanded list
        expandedCategoryIds = expandedCategoryIds.filter(id => id !== parentId);
    } else {
        // Expand
        container.addClass('expanded').slideDown(300);
        icon.removeClass('fa-chevron-right').addClass('fa-chevron-down');
        toggleBtn.addClass('expanded');

        // Add to expanded list
        if (!expandedCategoryIds.includes(parentId)) {
            expandedCategoryIds.push(parentId);
        }

        // Load subcategories
        loadSubcategories(parentId, level, container);
    }
}

function loadSubcategories(parentId, level, container) {
    container.html(`
        <div class="loading-subcategories text-center py-2">
            <div class="spinner-border spinner-border-sm text-primary mr-2"></div>
            <small class="text-muted">Đang tải danh mục con...</small>
        </div>
    `);

    $.ajax({
        url: '@Url.Action("GetSubcategories", "Home")',
        type: 'GET',
        data: { parentId: parentId },
        dataType: 'json',
        timeout: 10000,
        success: function(data) {
            if (data.success && data.subcategories && data.subcategories.length > 0) {
                var html = '';
                for (var i = 0; i < data.subcategories.length; i++) {
                    html += renderCategoryItem(data.subcategories[i], level);
                }
                container.html(html);
            } else {
                container.html(`
                    <div class="text-center py-2">
                        <small class="text-muted">Không có danh mục con</small>
                    </div>
                `);
            }
        },
        error: function() {
            container.html(`
                <div class="text-center py-2">
                    <small class="text-danger">Lỗi tải danh mục con</small>
                    <button type="button" class="btn btn-sm btn-outline-primary ml-2"
                            onclick="loadSubcategories(${parentId}, ${level}, $('#subcategories-${parentId}'))">
                        Thử lại
                    </button>
                </div>
            `);
        }
    });
}

function loadExpandedSubcategories() {
    expandedCategoryIds.forEach(function(parentId) {
        var container = $('#subcategories-' + parentId);
        if (container.length && container.hasClass('expanded')) {
            var level = parseInt(container.closest('[data-category-level]').attr('data-category-level')) + 1;
            loadSubcategories(parentId, level, container);
        }
    });
}

function selectCategory(categoryId, categoryName) {
    if (selectedCategories.some(function(sc) { return sc.Id === categoryId; })) {
        return;
    }

    selectedCategories.push({
        Id: categoryId,
        Name: categoryName
    });

    updateSelectedCategoriesDisplay();
    updateHiddenInputs();
    updateCategoryTreeSelection();
}

function unselectCategory(categoryId) {
    selectedCategories = selectedCategories.filter(function(sc) { return sc.Id !== categoryId; });
    updateSelectedCategoriesDisplay();
    updateHiddenInputs();
    updateCategoryTreeSelection();
}

function updateSelectedCategoriesDisplay() {
    var html = '';
    if (selectedCategories.length === 0) {
        html = '<span class="text-muted"><i class="fas fa-info-circle mr-1"></i>Chưa có danh mục nào được chọn</span>';
        $('#clearAllCategories').hide();
    } else {
        for (var i = 0; i < selectedCategories.length; i++) {
            var category = selectedCategories[i];
            html += '<span class="category-tag">';
            html += '<i class="fas fa-tag mr-1"></i>' + escapeHtml(category.Name);
            html += '<button type="button" class="remove-btn" onclick="unselectCategory(' + category.Id + ')" title="Bỏ chọn">';
            html += '<i class="fas fa-times"></i>';
            html += '</button>';
            html += '</span>';
        }
        $('#clearAllCategories').show();
    }
    $('#selectedCategoriesList').html(html);
}

function updateHiddenInputs() {
    var html = '';
    for (var i = 0; i < selectedCategories.length; i++) {
        html += '<input type="hidden" name="selectedCategories" value="' + selectedCategories[i].Id + '">';
    }
    $('#hiddenCategoryInputs').html(html);
}

function updateCategoryTreeSelection() {
    // Update checkboxes in tree
    $('.category-check').each(function() {
        var categoryId = parseInt($(this).attr('data-category-id'));
        var isSelected = selectedCategories.some(function(sc) { return sc.Id === categoryId; });
        $(this).prop('checked', isSelected);

        // Update visual selection
        var categoryItem = $(this).closest('.category-link, .subcategory-link, .sub-subcategory-link, .level-4-link, .level-5-link');
        if (isSelected) {
            categoryItem.addClass('selected');
        } else {
            categoryItem.removeClass('selected');
        }
    });
}

function expandAllCategories() {
    $('.category-toggle-btn').each(function() {
        var parentId = parseInt($(this).attr('data-parent-id'));
        var container = $('#subcategories-' + parentId);

        if (!container.hasClass('expanded')) {
            $(this).click();
        }
    });
}

function collapseAllCategories() {
    $('.category-toggle-btn.expanded').each(function() {
        $(this).click();
    });
}

function searchCategories(term) {
    showSearchLoading();

    $.get('@Url.Action("SearchCategories", "Category")', { term: term, pageSize: 20 }, function(data) {
        if (data.success && data.categories.length > 0) {
            displaySearchResults(data.categories);
        } else {
            showNoSearchResults();
        }
    }).fail(function() {
        showSearchError();
    });
}

function displaySearchResults(categories) {
    var html = '';
    for (var i = 0; i < categories.length; i++) {
        var category = categories[i];
        var isSelected = selectedCategories.some(function(sc) { return sc.Id === category.Id; });

        html += '<div class="search-result-item p-3 border-bottom" data-category-id="' + category.Id + '">';
        html += '<div class="d-flex justify-content-between align-items-center">';
        html += '<div class="flex-grow-1">';
        html += '<div class="form-check">';
        html += '<input type="checkbox" class="form-check-input category-search-check" ';
        html += 'data-category-id="' + category.Id + '" data-category-name="' + escapeHtml(category.Name) + '" ';
        html += (isSelected ? 'checked' : '') + '>';
        html += '<label class="form-check-label">';
        html += '<strong>' + escapeHtml(category.Name) + '</strong><br>';
        html += '<small class="text-muted">' + escapeHtml(category.Path) + '</small>';
        html += '</label>';
        html += '</div>';
        html += '</div>';
        html += '<span class="badge badge-info ml-2">' + category.NewsCount + ' tin</span>';
        html += '</div></div>';
    }

    $('#searchResultsList').html(html);
    showSearchResults();

    // Attach search checkbox events
    $('.category-search-check').on('change', function() {
        var categoryId = parseInt($(this).attr('data-category-id'));
        var categoryName = $(this).attr('data-category-name');

        if ($(this).is(':checked')) {
            selectCategory(categoryId, categoryName);
        } else {
            unselectCategory(categoryId);
        }
    });
}

function showSearchResults() {
    $('#categorySearchResults').show();
    $('.category-tree-wrapper').hide();
}

function hideSearchResults() {
    $('#categorySearchResults').hide();
    $('.category-tree-wrapper').show();
}

function showCategoryTree() {
    hideSearchResults();
}

function showSearchLoading() {
    $('#searchResultsList').html('<div class="text-center py-3"><div class="spinner-border spinner-border-sm"></div><p class="mt-2">Đang tìm kiếm...</p></div>');
    showSearchResults();
}

function showNoSearchResults() {
    $('#searchResultsList').html('<div class="text-center py-3"><i class="fas fa-search fa-2x text-muted mb-2"></i><p class="text-muted">Không tìm thấy danh mục phù hợp</p></div>');
}

function showSearchError() {
    $('#searchResultsList').html('<div class="text-center py-3"><i class="fas fa-exclamation-triangle fa-2x text-danger mb-2"></i><p class="text-danger">Lỗi khi tìm kiếm</p></div>');
}

function showCategoryError(message) {
    $('#categoryTreeContainer').html(`
        <div class="text-center py-4">
            <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
            <p class="text-danger">${message}</p>
            <button type="button" class="btn btn-sm btn-outline-primary" onclick="loadRootCategories()">
                <i class="fas fa-redo mr-1"></i>Thử lại
            </button>
        </div>
    `);
}

function validateForm() {
    var isValid = true;
    var errors = [];

    // Check title
    var title = $('#Title').val().trim();
    if (!title) {
        errors.push('Vui lòng nhập tiêu đề tin tức');
        isValid = false;
    }

    // Check categories
    if (selectedCategories.length === 0) {
        errors.push('Vui lòng chọn ít nhất một danh mục');
        isValid = false;
    }

    if (!isValid) {
        alert('Vui lòng kiểm tra lại:\n' + errors.join('\n'));
    }

    return isValid;
}

function showLoadingOverlay() {
    $('#loadingOverlay').fadeIn();
    $('#submitBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin mr-2"></i>Đang lưu...');
}

// Utility functions
function getCategoryLinkClass(level) {
    switch (level) {
        case 0: return 'category-link';
        case 1: return 'subcategory-link';
        case 2: return 'sub-subcategory-link';
        case 3: return 'level-4-link';
        default: return 'level-5-link';
    }
}

function getCategoryIconClass(level) {
    switch (level) {
        case 0: return 'fas fa-folder';
        case 1: return 'fas fa-folder-open';
        case 2: return 'fas fa-file-alt';
        case 3: return 'fas fa-file';
        default: return 'fas fa-circle';
    }
}

function escapeHtml(text) {
    if (!text) return '';
    var map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, function(m) { return map[m]; });
}
</script>